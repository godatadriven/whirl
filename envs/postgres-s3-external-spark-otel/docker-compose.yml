volumes:
  spark_downloads:

services:
  airflow:
    image: docker-whirl-airflow:py-${PYTHON_VERSION}-jre-${OPENJDK_VERSION}-local
    command: ["singlemachine"]
    ports:
      - '5000:5000'  # HTTP (Airflow Web UI)
    env_file:
      - .whirl.env
    environment:
      - AIRFLOW__API__AUTH_BACKEND
      - OTEL_TRACES_SAMPLER
      - OTEL_TRACES_EXPORTER
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - AIRFLOW__TRACES__OTEL_ON
      - AIRFLOW__TRACES__OTEL_HOST
      - AIRFLOW__TRACES__OTEL_PORT
      - AIRFLOW__TRACES__OTEL_APPLICATION
      - AIRFLOW__TRACES__OTEL_SSL_ACTIVE
      - AIRFLOW__TRACES__OTEL_TASK_LOG_EVENT
    volumes:
      - spark_downloads:/mnt/spark_downloads
      - ${DAG_FOLDER}:/opt/airflow/dags/$PROJECTNAME
      - ${ENVIRONMENT_FOLDER}/whirl.setup.d:${WHIRL_SETUP_FOLDER}/env.d/
      - ${DAG_FOLDER}/whirl.setup.d:${WHIRL_SETUP_FOLDER}/dag.d/
      - ${MOCK_DATA_FOLDER}:/mock-data
    depends_on:
      - s3server
      - postgresdb
      - sparkmaster
    links:
      - s3server:${DEMO_BUCKET}.s3server


  s3server:
    image: localstack/localstack:4.0.0
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - DEMO_BUCKET
      - AWS_SERVER
      - AWS_PORT
      - DEBUG=true

  otel:
    image: otel/opentelemetry-collector-contrib
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    volumes:
      - ${DAG_FOLDER}/otel-config/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    links:
      - tempo

  postgresdb:
    image: postgres:17
    ports:
      - 5432:5432
    environment:
      - POSTGRES_HOST=postgresdb
      - POSTGRES_PORT
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_DB

  sparkmaster:
    build:
      context: ${DOCKER_CONTEXT_FOLDER}/aws-spark
      dockerfile: Dockerfile
      args:
        - SPARK_VERSION=${SPARK_VERSION}
    environment:
      - SPARK_NO_DAEMONIZE=true
      - SPARK_MASTER_HOST=0.0.0.0
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SERVER
      - AWS_PORT
      - OTEL_TRACES_SAMPLER
      - OTEL_TRACES_EXPORTER
      - OTEL_EXPORTER_OTLP_ENDPOINT
    ports:
      - 7077:7077
      - 18080:8080
    entrypoint:
      - /usr/spark/sbin/start-master.sh
    links:
      - s3server:${DEMO_BUCKET}.s3server

  sparkworker:
    build:
      context: ${DOCKER_CONTEXT_FOLDER}/aws-spark
      dockerfile: Dockerfile
      args:
        - SPARK_VERSION=${SPARK_VERSION}
    environment:
      - SPARK_NO_DAEMONIZE=true
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SERVER
      - AWS_PORT
      - OTEL_TRACES_SAMPLER
      - OTEL_TRACES_EXPORTER
      - OTEL_EXPORTER_OTLP_ENDPOINT
    ports:
      - 18081:8081
    entrypoint:
      - /usr/spark/sbin/start-slave.sh
      - spark://sparkmaster:7077
      - "-m"
      - "8G"
    depends_on:
      - sparkmaster
    links:
      - s3server:${DEMO_BUCKET}.s3server

  # Grafana, Tempo taken from https://github.com/grafana/tempo/blob/60780f7ff878d86e0e23179fc65f2c3ed9832e9d/example/docker-compose/otel-collector/docker-compose.yaml
  tempo-init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ${DAG_FOLDER}/_tempo-data:/var/tempo

  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ${DAG_FOLDER}/grafana/tempo.yml:/etc/tempo.yaml
      - ${DAG_FOLDER}/_tempo-data:/var/tempo
    ports:
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
    depends_on:
      - tempo-init

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - ../shared/prometheus.yml:/etc/prometheus.yaml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ${DAG_FOLDER}/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
    links:
      - prometheus
      - tempo
