# Name your package! Package names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbt_athena_glue'
version: '1.0'

config-version: 2

# This setting configures which "profile" dbt uses for this project. Profiles contain
# database connection information, and should be configured in the  ~/.dbt/profiles.yml file
profile: 'dbt_athena_aws'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that source models can be found
# in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analysis"] 
test-paths: ["tests"]
seed-paths: ["data"]
macro-paths: ["macros"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_modules"

vars:
  "dbt_date:time_zone": "Europe/Amsterdam"

# You can define configurations for models in the `source-paths` directory here.
# Using these configurations, you can enable or disable models, change how they
# are materialized, and more!
models:
  dbt_athena_aws:
    staging:
      +materialized: table
      +table_type: iceberg
      +format: parquet
      +schema: unified
      +s3_staging_dir: s3://hub-athena-queryresults-bucket
      +s3_data_dir: s3://hub-unified-source-bucket
    marts:
      +materialized: table
      +table_type: iceberg
      +format: parquet
      +schema: transformation-spoke
      +s3_staging_dir: s3://spoke-athena-queryresults-bucket
      +s3_data_dir: s3://spoke-transformed-bucket

# FIXME: query-comment must be disabled for Athena to work because /* block comments are unsupported in Athena DML
# Removing this line will result in a Runtime Error during the integration test
#   `2 of 5 (2) create external table dbt.people_csv_partitioned ...`. The error is
#   "FAILED: ParseException line 1:0 cannot recognize input near '/' '*' '{".
# Is there a better way around this?
query-comment: ''
